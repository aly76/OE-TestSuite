%Calculates and plots the latency between network events and TTL signals
%Generates an excel file containing event information (event type, timestamp and message).
%Alan Ly, 2018

clear all; clc;

%Input parameters
numTrials = 10;
saveDirectory = 'C:\OpenEphys\02072018';
folderNum = 10;

%Initialise arrays
networkEvents = zeros(1,1);
TTL = zeros(1,1); 
trialDuration = zeros(1,1);
intertrialInterval = zeros(1,1); 
pathArray = cell(folderNum, 1); %Cell array used to store save paths

%Static variables
sampleRate = 30000; %Sample rate of the acquisition board (30kHz)

%Determine the path of each sub-folder
dirInfo = dir(saveDirectory);
for i = 1:folderNum 
    folderId = num2str(i);     
    for k = 1:size(dirInfo,1) 
        condition = strfind(dirInfo(k).name, [folderId '_2018']);
        if (~isempty(condition))
            pathArray{i, 1} = [saveDirectory  '\' dirInfo(k).name];            
        end 
    end 
end  

for z = 1:length(pathArray) %Repeat actions for each sub-directory
clearvars -except z pathArray numTrials networkEvents TTL trialDuration intertrialInterval sampleRate 
cd(pathArray{z,1}); 
    
%Extract event messages and their timestamps from the 'messages.events' file. 
fid = fopen('messages.events'); 

if (fid == -1) 
    error('Could not open ''messages.events'' file. Please check that the file is on MATLAB''s search path');
end   
 
%Determine the size of the file in bytes     
fseek(fid, 0, 'eof'); 
fileSize = ftell(fid); 
fseek(fid, 0, 'bof');     
    
eventNum = 1; 
eventLength = 1;

while (ftell(fid) < fileSize)  %Keep reading file until the file pointer reaches the end of the file. 
    
    events(eventNum, eventLength) = fread(fid, 1, 'char*1');    %Read a single byte 
                                                                %char*1 preserves the encoding scheme of the file (8-bit ASCII)
                                                                
    if (events(eventNum, eventLength) == 10)    %If newline (event) detected, start a new row. 
                                                %'10' in ASCII-8 corresponds to a newline. 
        eventLength = 1; %Reset column counter 
        eventNum = eventNum + 1; %Increment row counter
    else 
        eventLength = eventLength + 1; 
    end 
end 

data = char(events); %Convert 8-bit ASCII to characters. 

timestamps = cell(size(data,1), 1); 
msgs = cell(size(data,1), 1); 

%Separate timestamps and messages into individual cell arrays
for i = 1:size(data,1) 
    spaceIndex = strfind(data(i,:),' '); %The separator between timestamp and message is a space. 
    timestamps{i,1} = str2double(data(i,1:spaceIndex(1)))/sampleRate; %Convert timestamp to seconds
    msgs{i,1} = data(i, spaceIndex(1):end);
end 

parsedEvents = [timestamps msgs];

%Concatenate event messages from 'messages.events' with timestamps from 'all_channels.event'
[eventChannel, timestamps, info] = load_open_ephys_data('all_channels.events'); %Output the timestamps and eventType of TTL's and Network events stored in 'all_channels.events'
results = {info.eventType timestamps}; 

% ctr = 0; %counter used for catching errors

%For each timestamp in 'all_channels.events,' cross-check with timestamps in 'messages.events' to find a match.
%If a match is found, add the message at that timestamp to corresponding row in the cell array 'results' 
for i = 1:length(timestamps)
    if (results{1,1}(i,1) == 5) 
        for k = 1:length(parsedEvents)
            if (results{1,2}(i,1) == parsedEvents{k,1})
                results{1,3}{i,1} = parsedEvents{k,2};
%                 ctr = ctr + 1                     
            end 
        end
%         if (ctr ~= 1)
%             sprintf('i %d', i)
%             sprintf('ctr %d', ctr)
%             error('Events with identical timestamps exist');
%         else 
%             ctr = 0; 
%         end 
    end    
end 
    
%Determine latency between message and TTL 
%Extract network events corresponding to trial start and complete 
for i = 1:numTrials
    trialId = num2str(i); 
    for k = 1:length(results{1,3})
        trialExist = strfind(results{1,3}{k,1}, ['_T' trialId '_']);                             
        if (~isempty(trialExist))
            networkEvents(1, end+1) = results{1,2}(k,1); 
        end           
    end 
    for k = 1:length(results{1,3})
        trialExist = strfind(results{1,3}{k,1}, ['l' trialId 'c']);
        if (~isempty(trialExist))
            networkEvents(1, end+1) = results{1,2}(k,1); 
        end
    end 
end 

%Separate TTL's into individual array 
for i = 1:length(results{1,1})
    if (results{1,1}(i,1) == 3)
        TTL(1,end+1) = results{1,2}(i,1);
    end 
end 

if (z == length(pathArray)) %Only compute outputs if the outer loop is on the final folder 

%Remove first zero generated by initialisation
networkEvents = networkEvents(1,2:end); 
TTL = TTL(1,2:end);

%Caculate and plot message-TTL latencies
latency = abs(networkEvents - TTL);

figure(1)
plot(1:length(networkEvents), latency);
title('message-TTL latencies')
xlabel('Event number'); 
ylabel('Latency (s)'); 

%Calculate and plot trialDuration and intertrial intervals
temp = diff(TTL); 

%Pick out trialDurations (every odd index) 
for k = 1:2:length(temp) 
        trialDuration(1,end+1) = temp(1,k);
end 

%Pick out intertrial intevals (every even index)
for j = 2:2:length(temp)
    if (mod(j,numTrials) ~= 0) %Skip/omit the inter-trial interval between experiments
        intertrialInterval(1,end+1) = temp(1,j);
    end
end 

%Remove first zero generated by initialisation
trialDuration = trialDuration(1,2:end); 
intertrialInterval = intertrialInterval(1,2:end);

figure(2)
plot(1:length(trialDuration), trialDuration, 1:length(intertrialInterval), intertrialInterval); 
title('Trial durations and inter-trial intervals'); 
xlabel('Trial or inter-trial interval number')
ylabel('Duration (s)')
legend('Trial duration', 'Inter-trial interval'); 
end 

if (exist('events.xlsx', 'file') ~= 0) 
    delete events.xlsx
end 

%Write the results array to an Excel file for improved readability. 
filename = 'events.xlsx';
colHeaders = {'EventType', 'Timestamps (s)', 'Message'}; 
xlswrite(filename, colHeaders, 'Sheet1', 'A1');
xlswrite(filename, results{1,1}, 'Sheet1', 'A2');
xlswrite(filename, results{1,2}, 'Sheet1', 'B2'); 
xlswrite(filename, results{1,3}, 'Sheet1' , 'C2'); 
end 